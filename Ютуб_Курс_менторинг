NX ПОЛНЫЙ ГАЙД. МЕНТОРИНГ 36 ЗАНЯТИЕ

00:02 Введение в монорепозитории

• Монорепозитории — это один репозиторий с множеством проектов.
• Преимущества: совместная разработка, настройка среды один раз.
• Пример: Google использует монорепозитории для десятков тысяч проектов.

01:27 Проблемы обновления кода в крупных компаниях

• Обновление версии TypeScript требует одновременного обновления во всех проектах.
• Крупные компании используют монорепозитории для автоматизации обновлений.

01:39 История компании Narvel

• Компания Narvel основана бывшими разработчиками Angular из Google.
• Главный продукт компании — инструмент для автоматизации работы с монорепозиториями.

02:40 Проблемы миграции и автоматизации

• Разработчики Angular помогали компаниям с миграцией на новые версии Angular.
• Необходимость автоматизации изменений в сотнях и тысячах проектов.

04:40 Создание инструментов для автоматизации

• Разработка инструментов для автоматизации переездов и переиспользования компонентов.
• Основана компания Narvel для создания таких инструментов.

05:39 Преимущества монорепозиториев

• Монорепозитории полезны для крупных компаний с множеством проектов.
• Инструмент Enex от Narvel помогает управлять монорепозиториями.

07:40 Проблемы копипаста кода

• Копипаст кода из одного проекта в другой создает проблемы с поддержкой.
• Пример: изменение дизайна требует обновления в каждом проекте.

11:13 Проблемы с разными реализациями кода

• Разные реализации одного и того же функционала усложняют поддержку.
• Пример: разные интерсепторы и гварды для авторизации в разных проектах.

12:06 Решение проблем с копипастом и разными реализациями

• Приведение всех реализаций к одному стандарту упрощает поддержку.
• Проблемы с копипастом и разными реализациями кода решаются через монорепозитории.

12:56 Проблемы с Git Modules

• Git Modules позволяют вставлять подрепозитории в основной репозиторий.
• Проблемы возникают из-за разных веток в проекте и подмодуле.
• Разработчики могут создавать ветки, забывая о них, что приводит к конфликтам.

13:55 Сложности с Git Modules

• Разные ветки в подмодулях усложняют настройку проекта.
• Переключение между ветками требует координации с коллегами.
• В итоге от Git Modules отказались из-за запутанности.

14:51 Проблемы с копипастом и Git Modules

• Копипаст не работает, так как один и тот же код пишется многократно.
• Git Modules оказались неэффективными и запутанными.

15:28 Введение в Nexus

• Nexus — это внутрикорпоративное решение, аналогичное npm, но с закрытыми пакетами.
• Пакеты публикуются на собственном сервере компании.

16:18 Настройка и использование Nexus

• Настройка Nexus сложна и требует VPN и специальных файлов.
• Пример с модулем авторизации: код выносится в библиотеку и устанавливается через npm.

19:01 Проблемы с обновлением библиотек

• Обновление библиотек требует изменения версий в каждом проекте.
• Пример: исправление одной строки кода в библиотеке требует обновления всех проектов.

22:31 Сложности с зависимостями библиотек

• Каждая библиотека может использовать другие библиотеки, что усложняет обновление.
• Обновление одной библиотеки требует обновления всех зависимых библиотек и проектов.

23:23 Диаграмма зависимостей

• Построение диаграммы зависимостей библиотек и проектов помогает визуализировать структуру.
• Обновление библиотек вручную требует проверки всех проектов.

24:19 Масштабирование проблем

• В больших компаниях с множеством библиотек и проектов обновление вручную становится невозможным.
• Необходимость в более эффективном решении для повторного использования кода.

25:02 Проблема повторяющегося кода

• Ручная работа с кодом становится сложной.
• Добавление новых библиотек и проектов усложняет ситуацию.
• Копипаст и использование Git модулей не решают проблему.

25:54 Инженерная задача в крупных компаниях

• Проблема не в написании кода, а в его повторении.
• Необходимо придумать способ не повторять одно и то же множество раз.

26:39 Решение проблемы с помощью Inex

• Переход на Inex упростил работу с проектами и библиотеками.
• В крупных компаниях Inex используется повсеместно.

28:20 Преимущества Inex

• Inex заменяет Angular CLI, предлагая множество улучшений.
• В Inex можно добавлять плагины и утилиты одной командой.

30:12 Обновление Angular с Inex

• Обновление Angular через Inex проходит более гладко.
• Inex учитывает множество мелких деталей при обновлении.

31:47 Проблемы с разными версиями Angular

• Разные версии Angular в разных проектах создают хаос.
• Обновление версий Angular требует множества повторных действий.

34:32 Решение с Inex

• Перемещение проектов в один репозиторий на Inex.
• Один файл package.json для всех проектов.

35:31 Синхронизация версий библиотек

• Один файл package.json синхронизирует версии библиотек.
• Обновление Angular происходит только один раз для всех проектов.

36:38 Плюсы и минусы использования Inex

• Плюсы: не нужно заново писать одно и то же.
• Минусы: необходимость синхронизации всех версий кода.

37:19 Обновление версий в Google

• Обновление версии Angular в Google требует обновления всех 10 тысяч приложений одновременно.
• Постепенное обновление по частям приводит к большому техническому долгу.
• Обновление TypeScript в Google также требует обновления всех 100 тысяч проектов.

38:16 Монорепозиторий и его трудозатраты

• Обновление всех проектов одновременно требует больших трудозатрат.
• Монорепозиторий требует более квалифицированных специалистов и постоянной работы.
• Невозможно оставить старые версии, все проекты должны быть на новых версиях.

39:14 Синхронизация кода в монорепозитории

• В монорепозитории можно синхронизировать код между проектами.
• Пример: перенос модуля авторизации из шести проектов в одну библиотеку.
• Импорт библиотеки в разные проекты упрощает использование кода.

41:09 Пример использования библиотек

• Пример проекта "Юзерс" с использованием библиотек авторизации.
• Библиотеки можно добавлять в любые проекты без изменения кода.
• Пример импорта библиотек в роутер и их использования в разных проектах.

43:50 Переиспользование кода и UI Kit

• Переиспользование кода, такого как авторизация и интерсепторы, в разных проектах.
• Пример создания UI Kit на основе Angular Material.
• Пример использования компонентов из UI Kit в разных проектах.

46:41 Преимущества монорепозитория

• Монорепозиторий упрощает обновление кода и сборку проектов.
• Изменения в одной библиотеке автоматически отражаются во всех проектах.
• Философия разработки в Angular: любой код может быть переиспользован.

48:39 Архитектура приложения в Angular

• Приложение в Angular состоит из библиотек, как из кубиков.
• Пример структуры приложения: роутер-аутлет и компоненты в библиотеках.
• Весь код пишется в папке "libs", а не в папке "apps".

50:49 Переиспользование сущностей

• Возможность переиспользовать сущности из одного проекта в другой.
• Пример переноса модуля задач из одного проекта в другой.
• Архитектура позволяет легко переносить и использовать код между проектами.

51:41 Структура приложения в Angular

• Приложение в Angular состоит из библиотек и компонентов.
• Пример структуры: роутер-аутлет, хидер-футер и библиотеки.
• Каждая страница и модуль могут быть отдельной библиотекой, легко переносимой между приложениями.

52:44 Структура приложения и библиотек

• Приложение состоит из совокупности библиотек.
• Новый год пишется в библиотеках.
• Один файл Peckson на весь проект и репозиторий.
• Зависимости подтягиваются автоматически при сборке.

54:09 Документация и билд-процессы

• Документация обновляется каждые полгода.
• Возможность удаленного билда на серверах.
• Плагины для Angular и LitBuild.
• Континиус интеграция через GitHub Actions и Jenkins.

55:39 Сложности изучения Inex

• Документация сложная для понимания.
• Нет курсов по Inex, только YouTube-канал.
• Быстрое развитие и изменения в структуре библиотек.
• Необходимость опытного сеньора или длительного изучения.

58:29 Преимущества знания Inex

• Знание Inex дает преимущество при трудоустройстве.
• Мало разработчиков, знающих Inex, особенно хороших.
• Компании, использующие Inex, ценят таких специалистов.

01:00:07 Типы библиотек в Inex

• Четыре стандартных типа библиотек: Feature, UI, Data Access, Utility.
• Feature: законченный функционал для пользователя.
• UI: библиотеки для отображения компонентов.
• Data Access: управление данными и запросы к бэкэнду.
• Utility: простые утилиты для форматирования и валидации.

01:05:01 Иерархия библиотек

• Feature подключается к проекту, UI и Data Access к Feature.
• Утилиты используются всеми типами библиотек.
• Утилиты не могут использовать другие типы библиотек.

01:06:57 Использование Share

• Share можно не использовать с появлением Standalone Components.

01:07:07 Структура приложения и фичи

• Приложение состоит из фичей, которые могут использовать утилиты.
• Роутер аутлет отображает различные фичи на страницах.
• Пример: по пути "профайл" отображается фича "профайл".

01:08:32 Пример библиотеки пользователей

• Библиотека пользователей содержит фичи для отображения пользователей и получения данных.
• Фича "юзерс лист" использует компоненты карточки и списка.
• Контейнер служит промежуточным звеном между сервисами и UI-компонентами.

01:10:17 Использование библиотек

• Фича может использовать утилиты, UI-компоненты и другие фичи.
• Data Access может использовать только утилиты.
• Глобальные утилиты находятся в папке "кор".

01:10:58 Иерархия папок и библиотек

• Папка "кор" содержит общие утилиты, используемые везде.
• Папка "юзерс" содержит специфические утилиты для проекта "юзерс".
• Выделение библиотек должно быть разумным, чтобы не усложнять работу.

01:16:27 Практическая часть и создание библиотек

• Файл tsconfig.base.json содержит пути для импортов.
• Индексный файл библиотеки экспортирует публичные сущности.
• Экспорт сущностей делает их доступными снаружи, а отсутствие экспорта делает их приватными.

01:22:26 Создание новой фичи

• Для создания новой фичи нужно установить расширение "Iny Console".
• Правой кнопкой мыши можно вызвать контекстное меню для создания новых элементов.
• Пример: создание новой фичи "юзерс делит" для удаления пользователя.

01:23:26 Создание библиотеки

• Можно создавать различные компоненты и директивы.
• Важно, чтобы пакет, создающий библиотеку, был Angular.
• Интерфейс позволяет прописать различные свойства библиотеки.

01:24:32 Настройка библиотеки

• Библиотека будет называться "user-delete".
• Определяется папка для библиотеки.
• Настройки роутинга и публикации в npm не нужны.

01:26:23 Импорт и путь

• Путь импорта должен быть "users.users.user-delete".
• После создания библиотеки будет добавлен код с этим импортом.

01:28:23 Генерация и удаление библиотеки

• Нажатие "Generate" создает библиотеку.
• Удаление библиотеки осуществляется через команду "remove".

01:30:21 Создание компонентов

• Можно генерировать компоненты через команду "component".
• Настройки выбираются из списка.

01:31:40 Консольные команды и файлы

• В консоли есть команды для сборки и других действий.
• Настройки проекта хранятся в файле "project.json".

01:33:45 Зачем нужен Angular.js

• Angular.js позволяет переиспользовать компоненты и библиотеки.
• Предоставляет множество утилит для работы с монорепозиториями.

01:35:36 Структура проекта

• Проект состоит из фич, которые в свою очередь состоят из библиотек.
• Важно понимать, как правильно импортировать и удалять библиотеки.

01:38:14 Вопросы и ответы

• Вопросы по Angular.js и его использованию.
• Полное понимание приходит с опытом и помощью опытных разработчиков.

https://300.ya.ru/v_pxyWP5TH
